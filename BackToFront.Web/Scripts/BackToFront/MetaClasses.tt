<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime.Serialization" #>
<#@ assembly name="C:\Dev\Apps\BackToFront\WebExpressions\bin\Debug\WebExpressions.dll" #>
<#@ assembly name="C:\Dev\Apps\BackToFront\BackToFront\bin\Debug\BackToFront.dll" #>
<#@ assembly name="C:\Dev\Apps\BackToFront\BackToFront.Web\bin\Debug\BackToFront.Web.dll" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Runtime.Serialization" #>
<#@ import namespace="BackToFront.Meta" #>
<#@ import namespace="WebExpressions.Meta" #>
<#@ import namespace="BackToFront.Web.T4Helpers" #>

<#@ output extension=".ts" #>

<# 
	var types = new[] 
	{ 
		typeof(BackToFront.Meta.RuleMeta), 
		typeof(BackToFront.Meta.RuleCollectionMeta), 
		typeof(BackToFront.Utilities.MemberChainItem), 
		typeof(BackToFront.Framework.IValidationContext), 
		typeof(BackToFront.IViolation) 
	};

	var registeredTypes = new Dictionary<Type, string>();
	foreach (var t in types)
	{
		registeredTypes.Add(t, t.Name);
	}
	
	// each referenced type must be defined
	registeredTypes.Add(typeof(ExpressionMeta), "WebExpressions.Meta.ExpressionMeta");

	registeredTypes.Add(typeof(string), "string");
	registeredTypes.Add(typeof(bool), "bool");
	registeredTypes.Add(typeof(object), "any");
	
	registeredTypes.Add(typeof(string[]), "string[]");
	registeredTypes.Add(typeof(object[]), "any[]");
	
	registeredTypes.Add(typeof(System.Collections.Generic.IList<BackToFront.Meta.RuleMeta>), typeof(BackToFront.Meta.RuleMeta).Name + "[]");
	registeredTypes.Add(typeof(System.Collections.Generic.IList<BackToFront.IViolation>), typeof(BackToFront.IViolation).Name);
	registeredTypes.Add(typeof(System.Collections.Generic.IDictionary<string, object>), "any");
	
	registeredTypes.Add(typeof(BackToFront.Utilities.MemberChainItem[]), "BackToFront.Meta.MemberChainItem[]");
	registeredTypes.Add(typeof(System.Collections.Generic.IEnumerable<BackToFront.Utilities.MemberChainItem>), "BackToFront.Meta.MemberChainItem[]");
#>
/// <reference path="../../../WebExpressions/Scripts/ref/Exports.ts" />

module BackToFront {
	export module Meta {
<#foreach(var type in types) {
var members = type.GetMembers(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.DeclaredOnly)
	.Where(m => m.GetCustomAttribute<DataMemberAttribute>() != null);
var implements = types.Contains(type.BaseType) ? " extends " + type.BaseType.Name : "";#>
		export interface <#=type.Name + implements#> {
<#foreach(var member in members) {#>
			<#=member.Name + ": " + registeredTypes.TypeNameFor(member) #>;
<#}#>
		}

<#}#>
	}
}